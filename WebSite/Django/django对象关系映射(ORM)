ORM模型：
    ORM(Object Relational Mapping)，对象关系映射

ORM特性：
    面向对象的编程思想，方便扩充
    少些（几乎不写）SQL，提升开发效率
    支持多种类型数据库，方便切换
    ORM技术成熟，能解决绝大部分问题

1、ORM模型介绍及配置
    1.1 django ORM模型所支持的数据库类型：
        mysql：关系型数据量
        SQLite：嵌入式数据库
        PostgreSQL：
        Oracle：

    1.2 django ORM数据库配置
        settings 中DATABASES中配置：
            DATABASES = {
                'default': {          # 默认数据库，可配置多个数据库，使用名称来进行区分
                    'ENGINE': 'django.db.backends.mysql',           # 数据库引擎
                    'NAME': 'mydatabase',                           # 数据库名称
                    'USER': 'mydatabase_user',                      # 数据库登录用户
                    'PASSWORD': 'mypassword',                       # 数据库登录密码
                    'HOST': '127.0.0.1',                            # 数据库访问地址
                    'PORT': '3306',                                 # 数据库访问端口
                }
            }
          注意：
            sqlite3配置时只需要指定数据库引擎和数据库文件名称即可
        数据库引擎：
            [
            'django.db.backends.postgresql',
            'django.db.backends.mysql',
            'django.db.backends.sqlite3',
            'django.db.backends.oracle',
            ]
    1.3 常见类型
        数据库中的常用字段类型
            char            固定长度字符
            varchar         可变长度字符串
            int             整形
            datetime        时间
            float/decimal   浮点数/小数
            text            长文本

        类型的选项：
            null、blank          是否为Null、空值
            db_column            数据库表中对应的字段名称
            default              不填写改字段值时的默认值
            primary_key          主键
            unique               唯一索引
            verbose_name         供编程查看的字段名称（便于阅读）
            help_text            帮助文字
            choices              可供选择的选项，如：性别选项（男、女）
            get_FOO_display()    展示choices对应的值

        django中常见的类型：
            CharField、TextField     字符串、文本
            DateField、DatetimeField     日期时间
            FileField、ImageField        文件、图片
            IntegerField、SmallIntegerField      整数
            FloatField、DecimalField     小数
                CharField类型：
                    max_length      最大长度
                    相关类型：
                        EmailField      邮件输入（只能输入邮件地址）
                        URLField        URL输入
                        TextField       长文本输入
                        FilePathField       文件路径输入
                        ImageField      图片输入
                DatetimeField类型：
                    auto_now            更新时间为记录更改时的时间
                    auto_now_add        记录创建时间

        常见类型创建：
            在app目录下的models.py文件中创建数据库模型
                class Student(models.Model):
                    ''' 学生表 '''
                    name = models.CharField(max_length=64, verbose_name='姓名')
                    sex = models.CharField('性别', max_length=1, choices=(
                        ('1', '男'),
                        ('0', '女'),
                    ))
                    age = models.PositiveIntegerField('年龄')     # 只能为正整数
                    username = models.CharField('登录名', max_length=64, unique=True)      # unique=True, 表示唯一，不能有重复
                    password = models.CharField('密码', max_length=256)
                    created_at = models.DateTimeField('创建时间', auto_now_add=True)     # auto_now_add=True, 自动生成创建时间
                    updated_at = models.DateTimeField('最后更新时间', auto_now=True)         # auto_now=True, 自动生成更新时间

        模型同步migrate：
            检测模型：
                python manage.py check
            模型同步步骤：
                步骤一：使用 makemigrations 生成同步原语
                    python manage.py makemigrations
                步骤二：使用 migrate 执行同步
                    python manage.py migrate
                注：
                    如果同步完模型后，后面要增加一个字段的话，必须将其指定一个默认值
                            default='默认值'
                            null=True

        模型元数据：
            元数据描述：
                使用Meta类来进行表示
                对模型的补充说明

                db_table        模型映射的数据库表名称
                ordering        指定类型表的默认排序顺序
                verbose_name    供编程查看的字段名称（便于阅读）
                abstract        抽象类（抽象类不会生成数据库表）
                proxy           代理模型（对父模型的功能进行扩充）

                例：
                    class Meta:     # 内部类
                        verbose_name = '用户基础信息'
                        db_table = 'students'

        外键关联类型的对应关系：
            一对一关系：
                OneToOneField       表示一对一关系
                    例：用户基本信息  --  用户详细信息
            一对多关系：
                ForeignKey      表示一对多关系
                    例： 一个用户对应多个收获地址
            多对多关系:
                ManyToManyField     表示多对多关系
                    例：学生选课（n个学生对应n个课程）
                例：
                    courses = models.ManyToManyField(另一个表类名称)

        外键关联复合类型：
            复合类型：
                ContentType         模型类型
                ForeignKey(ContentType)     关联复合模型
                GenericForeignKey       关联模型
                GenericRelation         反向关联

2、ORM模型的增删改查：
    2.1、分析定义模型
        微博用户  1-to-many  发布微博
        微博内容  1-to-many   微博图片
        微博     many-to-many  评论
        评论     many-to-many  用户
        关注用户     many-to-many  被关注用户

    2.2、使用ORM实现新增操作
        使用ORM实现CRUD
            CREATE --新增
            READ  --读/查询
            UPDATE --修改
            DELETE  --删除

        使用模型的save()保存数据
            user_obj = User(username='admin', password='admin')
            user_obj.save()

        使用模型的create()新增数据
            user_obj = User.objects.create(username='admin', password='admin')

    2.3、使用ORM实现简单的查询操作
        使用模型的get()查询单条数据
            user.objects.get(pk=1)
        使用模型的all()查询所有的数据
            user.objects.all()

    2.4、使用ORM实现修改操作
        使用模型save()修改单条数据
            user_obj = user.objects.get(username='admin')
            user_obj.age = 20
            user_obj.save()

        使用模型update()批量修改数据
            user_obj = User.objects.all().update(*args, **kwargs)

    2.5 使用ORM实现删除操作
        使用模型的delete()删除数据
        删除单条数据
            user_obj = User.objects.get(pk=1)
            user_obj.delete()
        删除多条数据
            user_obj = User.objects.all()
            user_obj.delete()

        逻辑删除：   将数据标记为删除， 删除后还在占用磁盘空间， 删除后可以进行恢复， 删除后通过条件不展示给用户
        物理删除：   将数据直接从数据库中删除， 删除后不会占用磁盘空间，不能在进行恢复

3、查询条件的使用
        QuerySet 表示从数据库中取出来的对象的集合   QuerySet 结果集
        它可以含有0个、一个或者多个过滤器（filter）
        从模型的manager那里取得QuerySet
        QuerySet的筛选结果本身还是QuerySet
        QuerySet是惰性的
    3.1 结果集QuerySet常用方法
        get()   返回单条记录
        create()    创建/新增一条数据库记录
        get_or_create()     有则返回，没有则创建记录
            user_obj = User.objects.get_to_create(username='zhangsan', password='123123')
        bulk_create()       创建/新增多条数据库记录
            user1 = User(username='user1', password='123123')
            user_object = User.objects.bulk_create([user1,...,user5])
        first/last()       返回第一条/最后一条记录
            user_first = user.objects.first()   # 返回第一条数据
            user_last = user.objects.last()     # 返回最后一条数据
        count()         返回记录的行数之和
            user_count = User.objects.all().count()
        exists()        结果集是否存在（是否存在1条记录以上的记录）
            User.objects.filter(username='zhangsan').exists()
        update()    修改记录
        delete()    物理删除记录

    3.2 QuerySet链式查询方法
        filter（）     筛选出满足条件的多条记录
            User.objects.filter(age='20')   # 列出年龄为20岁的
            User.objects.filter(age='20').count()   # 统计筛选出年龄为20的数量
        exclude()       排除满足条件的多条记录
            User.objects.all().exclude(username='zhangsan)      # 列出除usernae为zhangsan的所有信息
        order_by        对查询的记录进行排序
            User.objects.all().order_by('-id')      # 对id列进行倒叙
        all()       查询所有的记录
        none()      创建一个空的结果集
        using()     使用指定的数据库查询（多数据库支持）

    3.3 分页处理
        减少等待时间，提升用户体验
        分页查询：
            方式一：
               对查询结果集QuerySet进行分片
               返回前n个对象（limit 5）
                User.objects.all()[:5]
               返回第6个到第10个对象（offset 5 limit 5）
                User.objects.all()[5:10]
            方式二：
                使用django.core.paginator进行分页处理

    3.4 分页处理相关类
        django.core.
        paginator   ----分页器
        page        ----某一页对象
        异常：
            InvalidPage     ----无效的页码
            PageNotAnlnteger    ----页码必须是正整数
            EmptyPage       ----空页（没有数据）
        进行分页处理:
            步骤一：取得分页器Paginator(objects, page_size)
                objects ----要进行分页的数据
                page_size   ----每页的数据多少
                示例：p = Paginator(objects, 2)
                      p对象属性：
                       count    ----数据记录的总条数
                       num_pages    ----总页数（总记录条数/每页大小）
                       page_range   ----页码范围
            步骤二：取得页面实例 page = p.page(page_num)
                page_num ----当前页的页码，如第几页
                p = Paginator(objects, 2)   # 获取分页器对象
                page = p.page(3)    # 获取第三页

                页面实例的属性：
                    number  ----当前页的页码
                    object_list ----当前页的数据列表
                    paginator   ----分页器对象的引用
                页码实例的常用方法：
                    has_next()  --是否还有下一页
                    has_previous()  --是否还有上一页
                    has_other_pages()   --是否还有其它页（上/下一页）
                    next_page_number()  --下一页的页码，如果没有，触发InvalidPage异常

                模型打印：
                    class WeiboUser(models.Model):
                        """微博用户"""
                            ...
                        def __str__(self):
                        '''实现模型的打印，输出详细内容'''
                            return 'User:{0},Nickname:{1}'.format(self.username, self.nickname)

    3.5 查询条件的使用
        查询语法：
            字段名称__查询条件="查询内容"(注意是双下划线)
                如：id__exact=6    查询id为6的
        查询条件：
            exact       ----等于**值（默认的形式）
            如: id__exact=6 或者 id=6

            iexact      ----像**值
            如：name__iexact='zhangsan'

            是否包含**字符串：
                contains    ----包含**值，区分大小写
                如： name__contains='san'
                icontains   ----包含**值，不区分大小写
                如： name_icontains='san'
            以**开始：
                startswith      ----以**开始，区分大小写
                istartswith     ----以**开始，不区分大小写
                如： name__startswith='张'

            以**结束：
                endswith        ----以**结束，区分大小写
                iendswith       ----以**结束，不区分大小写

            在**选项（列表）之类
                in

    3.6 查询条件的深入应用
        gt  ----大于某个值
            如：status__gt=2    # 大于2
        gte ----大于等于某个值
        lt  ----小于某个值
        lte ----小于等于某个值
        isnull  ----是否为空
            如：create_time__isnull=True    # 为空值

    3.7 时间戳的查询使用 ----date/datetime查询条件
        date    ----日期
        year    ----年
        month   ----月份
        day     ----天
        hour/minute/second  ----时分秒
        week/week_day   ----星期
        注：根据时间查询时注意settings中的时区设置，可将USE_TZ 修改为False，否则有时差的话会查询不出来

        外键关联查询：
            外键关联数据创建：
                user1 = WeiboUser.objects.get(username='user1')
                user1_weibo = WeiBo.objects.create(user=user1, context='my is user1')
                user1_comment = Comment.objects.create(user=user1, context='user1 is comment', weibo=user1_weibo)

            外键关联数据查询：
                user = User.objects.get(username='zhangsan')
                weibo_list = WeiBo.objects.filter(user=user)
                for item in weibo_list:
                    print(item.context)
                或者：
                weib_list = WeiBo.objects.filter(user__username='user1)
                for item in weibo_list:
                    print(item.context)

4、事务的使用
    什么时事务？
        多个数据库逻辑操作的集合
    事务特性：
        事务的原子性要求事务要么全部完成，要么全部不完成，不可能停滞在某个中间状态
    回滚：
        多个逻辑中某个操作出错，回到初始状态
    在什么情况下需要使用事务控制
        对多个ORM模型操作时
        对结果要求严格一致（要么成功，要么失败）

    4.1 在django中使用事务
        from django.db import transaction
        @transaction.atomic()       # 使用装饰器进行事务控制
        def viewfunc(request):
            # 事务内代码
            do_stuff()
        事务自动提交过程：
        atomic自动提交过程解析
            进入到最外层的atomic代码块时会打开一个事务
            进入到内部atomic代码块时会创建一个标记
            退出内部代码块时会释放或者回滚至标记
            退出外部块时提交或者回退事务
        手动提交和回滚：
            from django.db import transaction
            try:
                a.save()
                b.save()
                transaction.commit()    # 提交事务
            except:
                transaction.rollback()  # 回滚

    4.2 django中使用事务进行手动提交和回滚
        使用with进行事务的提交（只准用户提交成功）
        语法：
         with transaction.atomic():
            # 事务内代码
            do_stuff()

        手动提交和回滚
        try:
            transaction.set_autocommit(False)       # 放弃自动提交
            # 事务代码
            do_stuff()
            transaction.commit()    # 手动提交事务
        except:
            transaction.rollback()  # 手动控制事务，实现回滚

    4.3 django中聚合与统计的使用
        内置聚合函数
            聚合函数位于 django.db.models
            sum --求和
            avg --求平均数
            count   --计数
            max/min --最大值/最小值

        聚合的两种方式
            1)使用aggregate从整个查询结果集生成统计数据
            示例：
                from django.db.models import Avg
                B = Book.objects.all().aggregate(Avg('price'))
                {'price_avg': 34.35}
                B['prive_avg']  # 获取具体数据
            2)使用annotate为查询结果集中的每一项生成统计数据
            示例：
                from django.db.models import Count
                q = Book.objects.all().annotate(Count('authors'))   # 有外键关联时使用
                q = Book.objects.values_list('可以进行分组的列').annotate(Count('authors'))   # 没有外键关联时，一张表中进行分组
                q[0]
                <Book: The Definitive Guide to Django>
                q[0].authors__count


5、自定义查询
    5.1 使用Q()函数实现复杂的查询
        Q()函数支持 &（且）和|（或），对应sql中的AND和OR
        from django.db.models import Q
        query = Q(username='zhangsan')
        user_list = User.objects.filter(query)


    5.2 F()函数的使用
        F()函数从数据库操作层面修改数据
        F()函数可避免同时操作时竟态条件
        语法：
            import django.db.models.F(Combinable)
            user = WeiboUser.objects.get(pk=2)
            user.status = F('status') + 1
            user.save()

