1、django是什么？
    开源免费的python高级web框架，内置电池，用与快速开发可靠、安全、可扩展的web应用

2、django帮助文档
    https://docs.djangoproject.com

3、结构介绍：
    模型（Model）
    视图（view）
    模板（template）

4、开发流程
    选择合适的版本
    安装及配置基础环境
    生成项目结构
    内容开发
    迭代、上线、维护

5、查看django版本
    import django
    django.__version__

6、生成目录结构
    进入创建的虚拟环境，进入到需要创建的工作目录
    通过命令生成模板
    djang-admin startproject $my_project
    进入目录结构
    cd $my_project
    启动服务器
    python manager.py runserver

7、django目录结构介绍
    my_study    项目目录
     |-- __init.py__     包的入口文件
     |-- settings.py     项目配置文件
     |-- urls.py         url访问地址配置文件
     |-- wsgi.py         uwsgi配置
    db.sqlite3          sqllite数据库
    manage.py           命令管理工具

8、网站开发
    创建项目
        django-admin命令行创建项目
    创建accounts模块
        python manage.py startapp accounts

9、网站开发必备知识
    url:
        是统一资源定位符，对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址
        互联网上每个文件都有一个唯一的url
        基本url包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名
    url协议：
        http--超文本传输协议资源
        https--用安全套接字层传送的超文本传输协议
        ftp--文件传输协议
    常见的HTTP请求方式：
        GET
            可以用浏览器直接访问
            请可以携带参数，但是有长度限制
            请求参数直接放在url后面
              带参数方法：url/?key=value&key=value
        POST
            不能用浏览器直接访问
            对请求参数的长度没有限制
            可以用来上传文件等需求
    常见状态码：
        2xx     请求成功
            200     ok
            201     created
        3xx     重定向
        4xx     请求错误
            400     bad request
            401     unauthorized(没有登陆)
            403     forbidden(禁止)
            404     not found
        5xx     服务器错误
9.1 url与配置及参数传递
    url与视图的关系：
        访问的地址在有一个对应的视图      index/  ---->   view
    url匹配规则：
        完整匹配：
            ^index/$
        正则匹配：
            ^active/([0-9]{4})/$
            http://localhost/active/2020/

    url嵌套：
        分模块设计url
            根目录下的url:
                url(r'^active/(?P<year>[0-9]{4})/$', views.active)
            使用include包含其它模块的url
                url(r'^app/oauth/', include('oauth.urls'))

    如何设计优雅的url:
        使用简洁的url
            例：  http://localhost/active/?year=2020  优化后：http://localhost/active/2020
        给url指定命名空间namespace
            两种不同的角色访问不同的url，但是结果相同
            urlpatterns = [
                url(r'^author-poll/', include('polls.urls', namespace='author-poll')),
                url(r'^publisher-poll/', include('polls.urls', namespace='publisher-poll'))
            ]
        给url指定名称name
            url(r'^active/2020/$', views.active, name='active_date')
         reverse逆向解析URL：
                reverse('active_date', args=(2020,))
          reverse逆向解析namespace的url：
                reverse('accounts:index') #accounts为全局urls文件里定义的namespace名称；index为其它包模块中urls中定义的name

    问题：
        手动创建完templates（模板）目录后，访问url提示没有找到模板文件
        解决方法：
            在setting.py的TEMPLATES‘DIRS'[]加入模版路径，如下内容
                os.path.join(BASE_DIR, 'templates')


9.2 视图
    一个视图函数，简称视图，是一个简单的python函数
    接受一个请求，返回一个响应
    响应可以是HTML内容、文本、图像，甚至是404、重定向等

    9.2.1 定义视图：         --调用的模块from django.http import HttpResponse
        def view_name()定义视图
        实例：
            def cutter(request):
                html = "<html><body> it is new view!</body></html>"
                return HttpResponse(html)

    9.2.2 视图中获取url参数
        正则获取url中的参数
            url正则：
                url(r'^active/?P<year>[0-9]{4}/$', views.year, name='year')
            输入url：
                http://localhost:8000/active/2020
            视图编写：
                def active(request, year):
                    return HttpResponse('active : ' + year)
        获取url中的请求（GET/POST）参数：
            输入url：
                http://localhost:8000/index/?year=2020
            视图编写：
                def index(request):
                    year = request.GET.get('year', None)
                    day = request.GET.get('day', 20)

        返回HTML信息：
            通过文件读取方式返回：
            使用loader.get_template 读取
                loader.get_template('index.html')
            直接使用render函数
                #render传递参数，在htnl模板文件中的参数名必须用{{}}进行括起来
                return render(request, template_name, 参数)
            使用render_to_response函数
                return render_to_response(template_name, 参数)

    9.2.3  重定向
        实现url访问的重定向
            可以使用reverse(url名称) 逆向解析指定url中定义的name
            使用HttpResponseRedirect重定向
                return HttpResponseRedirect(逆向解析url)
            使用redirect()快捷方式
                redirect(url)
               或者   redirect(url中定义的name)

    9.2.4 内置视图及重写
        内置的错误处理视图：
            错误代码：
                400 Bad Request(请求参数错误)
                403 Forbidden
                404 Not Found
                500 Internal Server Error
            a、 在项目urls.py中添加配置
                handler500 = 'my_study.views.page_500'
                handler404 = 'my_study.views.page_404'
            b、 在项目views.py中添加对应的视图函数
                def page_500(request):
                    return HttpResponse('系统正在维护中')
            c、 DEBUG模式修改为 False

        static.server处理静态文件：
            a、 在项目setting.py中添加配置
                MEDIA_URL = '/media/'       #media为存放静态文件(用户上传的图片文件等)的目录（可自定义其它名称），与manage.py文件同级
               MEDIA_ROOT = os.path.join(BASE_DIR, 'medias')
            b、 在项目urls.py中添加配置
                from django.views.static import serve
                urlpatterns += [
                    url(r'^media/(?P<path>.*)$', serve, {
                        'document_root': settings.MEDIA_ROOT,
                    }),
                ]
            c、 访问url:
                http://127.0.0.1:8000/media/images/22.jpg

    9.2.5 请求响应对象（request对象）
        响应过程：
            浏览器输入url  ----发送请求---->  服务器  ----得到响应---->  浏览器显示页面内容等
        请求对象 HttpRequest
            请求方式method(POST/GET/...)
            请求头信息META（源数据）
                REMOTE_ADDR     请求的IP地址
                HTTP_USER_AGENT     用户请求终端信息
            获取请求传递参数
                GET----GET请求参数
                POST----POST请求参数
                COOKIES----cookie信息
                FILES----文件信息
            获取信息：
                ip = request.META['REMOTE_ADDR']  # 远程访问地址
                user_agent = request.META['HTTP_USER_AGENT']    # 用户的浏览器
                host = request.get_host()   # 访问地址
                path = request.path()  # 请求路径

        响应对象 HttpResponse：
            常见的Content-Type
                text/html   超文本标记语言文本（HTML）
                text/plain      普通文本
                text/xml        xml文档
                image/png、 image/jpeg、 image/gif        图片或图形
                application/json        json数据类型
                application/vnd.ms-excel    excel数据类型

            响应对象：
                HttpResponse
                HttpResponseRedirect    #重定向
                JsonResponse        #响应json
                FileResponse        #响应文件

            响应状态码：
                status  查看HTTP状态响应码
                status_code     查看HTTP响应状态码
                content_type    设置响应的类型
                write()         写入响应内容

    9.2.6 使用class重写视图
        基于类的视图：
            视图是一个可调用对象，可以接收一个请求然后返回一个响应
            基于类的视图可以结构化视图
            基于类的视图可以利用继承和混合重用代码
            内置的视图拿来即用，代码更简洁

         TemplateView
            步骤一：继承视图
                django.views.generic.TemplateView
            步骤二：配置模板地址
                    class ShowClassView(TemplateView):
                    ''' class 视图 '''
                    template_name = 'show_class.html'
            步骤三：配置url
                url('^show/class/$', views.ShowClassView.as_view(), name='show_class'),

         TemplateView原理解析
            从项目主目录寻找模板文件
            从app的模板目录寻找模板文件

        django内置通用视图
            django.views.generic.ListView       列表类数据的封装，如：商品列表     支持分页
            django.views.generic.DetailView     详情类数据的封装，如：商品详情

        settings配置文件里的INSTALLED_APPS中加入app名称：
            appname.apps.AppnameConfig      # app模块
        app目录下创建templates目录，用于存放静态html文件
        app下的urls.py文件：
            url(r'^index/$', views.index, name='index')
        app下的views.py指定templates的html
            from django.shortcuts import render
            def index(request):
                return render(request, template_name='index.html')
         或者：
            def index(request, template_name='index.html'):
                return render(request, template_name)
        在全局urls.py里配置app访问url
            r('^appname/', include('appname.urls', namespace='appname'))

9.3 django模板语法
    9.3.1 template介绍：
        模板和模板引擎：
            模板具有一定的格式或骨架，可以动态生成HTML
            模板引擎决定以何种方式组织代码
            一个项目可以有一个或者多个模板引擎
                DTL     Jinja2
            DTL(Django Template Language)是django原生的模板系统
                直到django1.8，唯一的模板引擎支持
            Jinja2：
                官网地址： docs.jinkan.org/docs/jinja2
                速度更快，python的功能齐全的开源模板引擎
             安装：
                pip install jinja2
        渲染机制：
            没有模板引擎的情况下在浏览器展示HTML：
                a、从磁盘读取html字符串
                b、将满足特定规则的内容进行替换
                c、发送浏览器进行展示
            django模板引擎的渲染机制：
                步骤一：从磁盘读取模板文件（get_template）
                步骤二：选择合适的模板引擎（select_template）
                步骤三：将制定内容对模板进行渲染（render）
                步骤四：发送给浏览器显示

        jinja2语法：
            # 定义变量
                <body>user:{{username}}</body>      {{}}里定义的是变量

    9.3.2 templates相关配置
        配置文件：
            settings.py ---->  TEMPLATES中进行配置
        配置选项：
            BACKEND ---->模板引擎配置
                django.template.backends.django.DjangoTemplates
                django.template.backends.jinja2.Jinja2
            DIRS ---->模板引擎按列表顺序搜索这些目录以查找模板源文件
            APP_DIRS ---->决定模板引擎是否应该进入每个已安装的应用中查找模板
                每种模板引擎后端都定义了一个惯用的名称作为应用内部存放模板的子目录名称
                    DTL ---->templates目录
                    Jinja2 ---->jinja2目录
            OPTIONS ---->其他选项配置
        同时支持两种模板引擎：
            添加模板配置引擎支持：
                TEMPLATES = [
                    {'BACKEND': 'django.template.backends.django.DjangoTemplates',
                        'DIRS': [os.path.join(BASE_DIR, 'templates')],
                    },
                    {'BACKEND': 'django.template.backends.jinja2.Jinja2',
                        'DIRS': [os.path.join(BASE_DIR, 'jinja2')],
                    }
                ]
            模板文件查找规则get_template('detail.html')
                安装配置文件中配置的顺序进行依次查找：
                    templates/datail.html
                    jinja2/datail.html
                    app/templates/datail.html

    9.3.3 模板变量使用：
        渲染python中的变量：
            语法：
                {{ variable }}
            当模板引擎遇到一个变量，它将计算这个变量，然后用结果替换掉它本身
            变量名称中不能有空格或者标点符号

            渲染静态图片：
                图片地址    img_url = '/imges/22.jpg'
                模板文件中渲染     <img src="{{ img_url }}" alt='图片' />
                注意：
                    需要在urls.py文件中配置静态文件目录访问url，否则会有问题

        渲染python中的对象：
            语法：
                {{ object.attribute }}
            dict类型数据的渲染
            list/tuple类型数据的渲染
            list/tuple嵌套dict复杂类型数据的渲染

            渲染python中的对象：
                python对象： user_info = {"name": "zhangsan", "age": 18}
                模板文件中渲染： <p> name: {{ user_info.name }}  age: {{ user_info.age }} </p>

    9.3.4 模板标签使用 --语法使用
        语法：
            {{% tag %}
        循环控制：
            {% for item in data_list %}
            <li>{{ 内容 }}<li>
            {% empty %}
                内容为空
            {% endfor %}
         for循环控制，并以逆序方式进行展示：
            {% for item in data_list reversed %}
                {{ item }}
            {% endfor %}
        条件控制：
            {% if condition_a %}
                满足a条件
            {% elif condition_b %}
                满足b条件
            {% else %}
                都不满足
            {% endif %}
        其它条件控制：
            and, or, ==, !=, >, <, >=, <=, in, not in, is
        添加注释：
            {# 注释内容 #}

    9.3.5 模板标签使用  --当前时间显示
        for循环对象，渲染dict：
            语法：
                {% for key, value in data.items %}
                    {{ key }} : {{ value }}
                {% endfor %}