#正则表达式

'''
    正则表达式（简称regex）是一些由字符和特殊字符组成的字符串
    能按照某种模式匹配一系列有相似特征的字符串
        [a-z]表示26个小写英文字母

    正则表达式中的符号
    literal     匹配文本字符串的字面值 literal         foo
    re1|re2     匹配正则表达式re1 或者 re2             foo|br
    .           匹配任何字符（除了\n之外）              b.b
    ^           匹配字符串起始部分                      ^Dear
    $           匹配字符串终止部分                       /bin/*sh$
    *           匹配0次或者多次前面出现的正则表达式      [A-Za-z0-9]*
    +           匹配1次或者多次前面出现的正则表达式      [a-z]+\.com
    ?           匹配0次或者1次前面出现的正则表达式         goo?
    {N}         匹配N次前面出现的正则表达式              [0-9]{3}
    {M, N}      匹配M ~ N次前面出现的正则表达式          [0-9]{5,9}
    [...]       匹配来自字符集的任意单一字符              [aeiou]
    [..x-y..]   匹配 x~y 范围内中的任意单一字符          [0-9],[A-Za-z]
    [^...]      不匹配此字符集中出现的任何一个字符，包括某一范围的字符（如果在此字符集中出现）     [^aeiou],[^A-Za-z0-9]
    (*|+|?|{})? 用于匹配上面频繁出现/重复出现符号的非贪婪版本（*、+、?、{}）           .*?[a-z]
    (...)       匹配封闭的正则表达式，然后另存为子组      ([0-9]{3})?,f(00|u)bar

    正则表达式中的特殊字符：
    \d      匹配任何十进制的数字，与[0-9]一致(\D与\d相反，不匹配任何非数值型的数字)       date\d+.txt
    \w      匹配任何字母数字字符，与[A-Za-z0-9_]相同（\W与之相反）                      [A-Za-z]\w+
    \s      匹配任何空格字符，与[\n\t\r\v\f]相同，（\S与之相反）                       of\sthe
    \b      匹配任何单词边界（\B与之相反）                                            \bThe\b

    \c      逐字匹配任何特殊字符c（即，仅按照字面意义匹配，不匹配特殊含义）                \., \\, \*
    \A(\Z)  匹配字符串的起始（结束）（令见上面介绍的^和$）                               \ADear

'''

#正则表达式的分组
'''
    重复一个字符串时    例如：abcabcabc    (abc){3}
    使用()进行分组，使用(?<world\w+>)指定组名        使用\k<name>引用组
    从左向右，以分组的左括号为标志，第一个出现的分组组号为1，第二个为2，以此类推
    IP地址分组  (\d{1,3}\.){3}\d{1,3}
'''

#贪婪模式VS非贪婪模式
'''
    贪婪匹配：   在整个表达式匹配成功的前提下，尽可能多的匹配      --默认
    非贪婪匹配：  在整个表达式匹配成功的前提下，以最少的匹配字符
                    使用非贪婪匹配：    只需在匹配pattern中加上  ?  
    贪婪匹配：
        测试数据：   abacaxcd
        贪婪匹配表达式：    ab.+c
        贪婪模式匹配结果：   abacaxc
        
        非贪婪匹配表达式：   ab.*?c
        非贪婪模式匹配结果：  abac
'''
